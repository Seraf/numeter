#!/usr/bin/env python
#
# Plugin to monitor time of numeter
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_time_ /etc/munin/plugins/numeter_time_<all|poller|collector|storage>
#
# Magic markers
#%# capabilities=autoconf suggest
#%# family=auto
#
#  [numeter_time_*]
#  env.pollerLog
#  env.collectorLog
#  env.storageLog
#  env.pollerPattern
#  env.collectorPattern
#  env.storagePattern
#  env.grepPattern

import sys
import os
import subprocess
import re

try: 
    from numeter_poller import myPoller
except ImportError:
    IMPORT_POLLER = False
else:
    IMPORT_POLLER = True

try: 
    from numeter_collector import myCollector
except ImportError:
    IMPORT_COLLECTOR = False
else:
    IMPORT_COLLECTOR = True

try: 
    from numeter_storage import myStorage
except ImportError:
    IMPORT_STORAGE = False
else:
    IMPORT_STORAGE = True

def print_config(check_type):
    print 'graph_title Numeter %s execution time' % check_type
    print 'graph_info This graph shows %s execution time' % check_type
    print 'graph_vlabel Secondes'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    if check_type == "all":
        check_type = "poller collector storage"
    for name in check_type.split():
        print '%s.label %s' % (name, name)
        print '%s.draw LINE' % name
        print '%s.info %s Time' % (name, name)
        if name == "poller":
            print '%s.color #909122' % name
        if name == "collector":
            print '%s.color #67809e' % name
        if name == "storage":
            print '%s.color #53b73a' % name

def print_suggest():
    if IMPORT_POLLER:
        print "poller"
    if IMPORT_COLLECTOR:
        print "collector"
    if IMPORT_STORAGE:
        print "storage"
    if IMPORT_POLLER and IMPORT_COLLECTOR and IMPORT_STORAGE:
        print "all"

def load_params():
    global POLLER_LOG, POLLER_PATTERN
    global COLLECTOR_LOG, COLLECTOR_PATTERN
    global  STORAGE_LOG, STORAGE_PATTERN
    global  GREP_PATTERN
    POLLER_LOG        = os.getenv('pollerLog','/var/log/numeter/numeter-poller.log')
    COLLECTOR_LOG     = os.getenv('collectorLog','/var/log/numeter/numeter-collector.log')
    STORAGE_LOG       = os.getenv('storageLog','/var/log/numeter/numeter-storage.log')
    POLLER_PATTERN    = os.getenv('pollerPattern','.*---- End : numeter_.*in ([0-9\.]+), seconds')
    COLLECTOR_PATTERN = os.getenv('collectorPattern','.*---- End : numeter_.*in ([0-9\.]+), seconds')
    STORAGE_PATTERN   = os.getenv('storagePattern','.*---- End : numeter_.*in ([0-9\.]+), seconds')
    GREP_PATTERN      = os.getenv('grepPattern',' End : numeter_') # For performance 

def get_time_in_log(name, logfile, pattern):
    stdout = subprocess.Popen('grep "'+GREP_PATTERN+'" '+logfile+' | tail -1', shell=True, stdout=subprocess.PIPE)
    out = stdout.communicate()[0]
    # 0 data / 1 error
    regex = pattern
    if re.match(regex, out):
        result = re.match(regex, out)
        if result.group(1) != None:
            return str(result.group(1))
            #return 'yes'
    else:
        return 'U'

def print_values_poller():
    if not os.path.isfile(POLLER_LOG):
        print "poller.value U"
        return
    print 'poller.value ' + get_time_in_log('poller', POLLER_LOG, POLLER_PATTERN)

def print_values_collector():
    if not os.path.isfile(COLLECTOR_LOG):
        print "collector.value U"
        return
    print 'collector.value ' + get_time_in_log('collector', COLLECTOR_LOG, COLLECTOR_PATTERN)

def print_values_storage():
    if not os.path.isfile(STORAGE_LOG):
        print "storage.value U"
        return
    print 'storage.value ' + get_time_in_log('storage', STORAGE_LOG, STORAGE_PATTERN)


if __name__ == '__main__':
    ARGV = sys.argv[:]
    #check_type = argv[0].split('numeter_').pop() or 'Global'
    CHECK_TYPE = ARGV[0].split('numeter_time_').pop()
    if len(ARGV) > 1:
        if ARGV[1] == 'config':
            print_config(CHECK_TYPE)
        elif ARGV[1] == 'suggest' and ( IMPORT_POLLER or IMPORT_COLLECTOR or IMPORT_STORAGE ):
            print_suggest()
        elif ARGV[1] == 'autoconf':
            if not IMPORT_POLLER and IMPORT_COLLECTOR and IMPORT_STORAGE:  
                print 'no (failed import poller or collector or storage module)'
                sys.exit(0)
            print 'yes'

    elif IMPORT_POLLER and CHECK_TYPE == "poller":
        load_params()
        print_values_poller()
    elif IMPORT_COLLECTOR and CHECK_TYPE == "collector":
        load_params()
        print_values_collector()
    elif IMPORT_STORAGE and CHECK_TYPE == "storage":
        load_params()
        print_values_storage()
    elif IMPORT_STORAGE and IMPORT_COLLECTOR and IMPORT_POLLER and CHECK_TYPE == "all":
        load_params()
        print_values_poller()
        print_values_collector()
        print_values_storage()

