#!/usr/bin/env python
#
# Plugin to monitor numeter storage
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_storage_memory /etc/munin/plugins/numeter_storage_memory
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto
#
# VmPeak                      peak virtual memory size
# VmSize                      total program size
# VmLck                       locked memory size
# VmHWM                       peak resident set size ("high water mark")
# VmRSS                       size of memory portions
# VmData                      size of data, stack, and text segments
# VmStk                       size of data, stack, and text segments
# VmExe                       size of text segment
# VmLib                       size of shared library code
# VmPTE                       size of page table entries
# VmSwap                      size of swap usage (the number of referred swapents)
#

import sys
import subprocess
import re

try: 
    from numeter_storage import myStorage
except ImportError:
    IMPORT_STORAGE = False
else:
    IMPORT_STORAGE = True

try:
    FPID = open('/var/run/numeter_storage.pid', 'r')
    PIDOK = True
except IOError:
    print 'storage not running or pid file missing'
    PIDOK = False

def get_pid():
    pid = FPID.readline()
    pid = pid.rstrip()
    return pid
    
def print_config(data_list):
    print 'graph_title Numeter storage mem usage'
    print 'graph_info This graph shows the memory usage of the Numeter storage daemon'
    print 'graph_vlabel Size in kB'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    for name in data_list:
        print '%s.label %s' % (name, name)
        print '%s.draw LINE' % name


def get_data_from_file(pid):
    fname = '/proc/' + pid + '/status'
    stdout = subprocess.Popen('cat %s 2>/dev/null' % fname,
                              shell=True,
                              stdout=subprocess.PIPE)
    datas = {}
    for line in stdout.communicate()[0].split('\n'):
        match = re.match("^([^:]+):\s+([^ ]+)", line)
        if match is not None:
            key     = match.group(1)
            value   = match.group(2)
            datas[key] = value
    return datas

def print_values(key, datas):
    try:
        print "%s.value %s" % (key, datas[key])
    except:
        print "%s.value U" % (key)

if __name__ == '__main__':
    ARGV = sys.argv[:]
    DATA_LIST = ['VmPeak', 'VmSize', 'VmLck',
                 'VmHWM', 'VmRSS', 'VmData',
                 'VmStk', 'VmExe', 'VmLib',
                 'VmPTE', 'VmPTD', 'VmSwap',
                 'Threads']
    if len(ARGV) > 1:
        if ARGV[1] == 'config':
            print_config(DATA_LIST)
        elif ARGV[1] == 'autoconf':
            if not IMPORT_STORAGE:
                print 'no (failed import storage module)'
                sys.exit(0)
            print 'yes'
    elif PIDOK:
        PID = get_pid()
        DATAS = get_data_from_file(PID)
        for data_name in DATA_LIST:
            print_values(data_name, DATAS)
    else:
        sys.exit(0)
