#!/usr/bin/env python
#
# Plugin to monitor numeter poller
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_poller_memory /etc/munin/plugins/numeter_poller_memory
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto
#
#  [numeter_storage_stats]
#  env.storageLog
#  env.storagePattern
#  env.grepPattern

#
# VmPeak                      peak virtual memory size
# VmSize                      total program size
# VmLck                       locked memory size
# VmHWM                       peak resident set size ("high water mark")
# VmRSS                       size of memory portions
# VmData                      size of data, stack, and text segments
# VmStk                       size of data, stack, and text segments
# VmExe                       size of text segment
# VmLib                       size of shared library code
# VmPTE                       size of page table entries
# VmSwap                      size of swap usage (the number of referred swapents)
#

import sys
import os
import subprocess
import re

try:
    fpid = open('/var/run/numeter_poller.pid', 'r')
    pidok = True
except IOError:
    print 'poller not running or pid file missing'
    pidok = False

def get_pid():
    pid = fpid.readline()
    pid = pid.rstrip()
    return pid
    
def print_config(data_list):
    print 'graph_title Numeter poller mem usage'
    print 'graph_info This graph shows the memory usage of the Numeter poller daemon'
    print 'graph_vlabel Size in kB'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    for name in data_list:
        if name == 'VmHWM':
            print '%s.label %s' % (name,name)
            print '%s.draw LINE' % name
            print '%s.color %s' % (name,'#909122')
        if name == 'VmRSS':
            print '%s.label %s' % (name,name)
            print '%s.draw LINE' % name
            print '%s.color %s' % (name,'#67809e')
        if name == 'VmPeak':
            print '%s.label %s' % (name,name)
            print '%s.draw LINE' % name
            print '%s.color %s' % (name,'#9091ee')
        if name == 'VmSize':
            print '%s.label %s' % (name,name)
            print '%s.draw LINE' % name
            print '%s.color %s' % (name,'#e1809e')

def get_data_from_file(pid,gp):
    FILE = '/proc/' + pid + '/status'
    stdout = subprocess.Popen('grep "' + gp + '" ' + FILE
                              + ' 2>/dev/null | tail -1 | awk \'{print $2}\'',
                              shell=True,
                              stdout=subprocess.PIPE)
    return stdout.communicate()[0].rstrip()

def print_values(name,value):
    if value is None:
        value = 'U'
    print "%s.value %s" % (name, value)

if __name__ == '__main__':
    argv = sys.argv[:]
    data_list = ['VmHWM','VmRSS','VmPeak',' VmSize']
    if len(argv) > 1:
        if argv[1] == 'config':
            print_config(data_list)
        elif argv[1] == 'autoconf':
            print 'yes'
    elif pidok:
        pid = get_pid()
        for d in data_list:
            data = get_data_from_file(pid,d)
            print_values(d,data)
    else:
        sys.exit(0)
