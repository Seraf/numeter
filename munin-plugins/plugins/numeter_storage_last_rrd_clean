#!/usr/bin/env python
#
# Plugin to monitor the time since the last rrd clean for the numeter storage
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto
#
#  [numeter_storage_last_rrd_clean]
#  env.redisKey
#  env.redisHost
#  env.redisPort
#  env.redisTimeout
#  env.redisDb
#  env.redisPassword

import sys
import os
import time
import datetime

try: 
    from myRedisConnect import *
except ImportError:
    import_redis = False
else:
    import_redis = True

def print_config():
    print 'graph_title Numeter storage last rrd clean'
    print 'graph_info This graph shows time since the last rrd clean'
    print 'graph_vlabel Seconds'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    print 'lastrrdcleanclean.label lastrrdclean'
    print 'lastrrdcleanclean.draw LINE'
    print 'lastrrdcleanclean.info lastrrdclean Time'
    print 'lastrrdcleanclean.color #909122'

def load_params():
    global REDIS_KEY
    global REDIS_HOST
    global REDIS_PORT
    global REDIS_TIMEOUT
    global REDIS_DB
    global REDIS_PASSWORD

    REDIS_KEY       = os.getenv('redisKey','LAST_RRD_CLEAN')
    REDIS_HOST      = os.getenv('redisHost','127.0.0.1')
    REDIS_PORT      = os.getenv('redisPort', 6379)
    REDIS_TIMEOUT   = os.getenv('redisTimeout',10)
    REDIS_DB        = os.getenv('redisDb', 2)
    REDIS_PASSWORD  = os.getenv('redisPassword', None)


def print_values():
    redis_connexion = myRedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        self._logger.critical("Redis server connexion ERROR - "
        + "Check server access or the password")
        exit(1)

    lastFetch = redis_connexion.redis_get(REDIS_KEY)

    if not lastFetch:
        print "lastrrdcleanclean.value U"
        sys.exit(1)
    t = datetime.datetime.now()
    t = time.mktime(t.timetuple())
    lastClean = t - int(lastFetch)

    print 'lastrrdcleanclean.value',lastClean


if __name__ == '__main__':
    argv = sys.argv[:]
    if len(argv) > 1:
        if argv[1] == 'config':
            print_config()
        elif argv[1] == 'autoconf':
            if not import_redis:  
                print 'no (failed import redis module)'
                sys.exit(0)
            print 'yes'

    elif import_redis:
        load_params()
        print_values()
