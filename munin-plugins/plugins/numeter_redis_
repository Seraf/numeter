#!/usr/bin/env python
#
# This plugin monitor redis size and number of keys
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_redis_ /etc/munin/plugins/numeter_redis_<collector|storage>
#
# Magic markers
#%# capabilities=autoconf suggest
#%# family=auto
#
#  [numeter_redis_*]
#  env.redisHost
#  env.redisPort
#  env.redisTimeout
#  env.redisDb
#  env.redisPassword

import sys
import os

try: 
    from numeter_collector import myCollector
except ImportError:
    IMPORT_COLLECTOR = False
else:
    IMPORT_COLLECTOR = True

try: 
    from numeter.storage import Storage
except ImportError:
    IMPORT_STORAGE = False
else:
    IMPORT_STORAGE = True

try: 
    from numeter.redis import RedisConnect
except ImportError:
    IMPORT_REDIS = False
else:
    IMPORT_REDIS = True

def print_config(check_type):
    print 'graph_title Numeter redis %s' % check_type
    print 'graph_info This graph shows redis size in MB and number of keys'
    print 'graph_vlabel Size in MB / Num'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    if type == 'storage':
        print_storage_configs()
    if type == 'collector':
        print_collector_configs()

def load_params():
    global REDIS_HOST
    global REDIS_PORT
    global REDIS_TIMEOUT
    global REDIS_DB
    global REDIS_PASSWORD

    REDIS_HOST      = os.getenv('redisHost', '127.0.0.1')
    REDIS_PORT      = os.getenv('redisPort', 6379)
    REDIS_TIMEOUT   = os.getenv('redisTimeout', 10)
    REDIS_DB        = os.getenv('redisDb', 1)
    REDIS_PASSWORD  = os.getenv('redisPassword', None)

def get_redis_size():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        print("Redis server connexion ERROR - "
        + "Check server access or the password")
        exit(1)
    try:
        return float(redis_connexion.redis_info()['used_memory'])/1024/1024
    except:
        return None

def get_redis_keys():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        print("Redis server connexion ERROR - "
        + "Check server access or the password")
        exit(1)
    return redis_connexion.redis_info()['db%s' % REDIS_DB]['keys']


def print_storage_values():
    # Redis size
    print_values('redis_size', get_redis_size())
    # Redis num of keys
    print_values('redis_num_keys', get_redis_keys())

def print_collector_values():
    # Redis size
    print_values('redis_size', get_redis_size())
    # Redis num of keys
    print_values('redis_num_keys', get_redis_keys())

def print_storage_configs():
    # Redis size
    print '%s.label %s' % ('redis_size', 'Redis database size')
    print '%s.draw LINE' % 'redis_size'
    print '%s.color %s' % ('redis_size', '#909122')
    # Redis num of keys
    print '%s.label %s' % ('redis_num_keys', 'Number of redis keys')
    print '%s.draw LINE' % 'redis_num_keys'
    print '%s.color %s' % ('redis_num_keys', '#0327ca')

def print_collector_configs():
    # Redis size
    print '%s.label %s' % ('redis_size', 'Redis database size')
    print '%s.draw LINE' % 'redis_size'
    print '%s.color %s' % ('redis_size', '#909122')
    # Redis num of keys
    print '%s.label %s' % ('redis_num_keys', 'Number of redis keys')
    print '%s.draw LINE' % 'redis_num_keys'
    print '%s.color %s' % ('redis_num_keys', '#0327ca')

def print_values(name, value):
    if value is None:
        value = 'U'
    print "%s.value %s" % (name, value)

if __name__ == '__main__':
    ARGV = sys.argv[:]
    CHECK_TYPE = ARGV[0].split('numeter_redis_').pop()
    if len(ARGV) > 1:
        if ARGV[1] == 'config':
            print_config(check_type=CHECK_TYPE)
        elif ARGV[1] == 'suggest' and ( IMPORT_COLLECTOR or IMPORT_STORAGE ):
            if IMPORT_COLLECTOR:
                print "collector"
            if IMPORT_STORAGE:
                print "storage"
        elif ARGV[1] == 'autoconf':
            if not IMPORT_REDIS and (IMPORT_COLLECTOR or IMPORT_STORAGE):
                print 'no (failed import redis and collector or storage module)'
                sys.exit(0)
            print 'yes'

    elif IMPORT_REDIS and IMPORT_COLLECTOR and CHECK_TYPE == "collector":
        load_params()
        print_collector_values()
    elif IMPORT_REDIS and IMPORT_STORAGE and CHECK_TYPE == "storage":
        load_params()
        print_storage_values()

