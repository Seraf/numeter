#!/usr/bin/env python
#
# Plugin to monitor numeter storage
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_storage_stats /etc/munin/plugins/numeter_storage_stats
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto
#
#  [numeter_storage_stats]
#  env.storageLog
#  env.storagePattern
#  env.grepPattern

import sys
import os
import subprocess
import re

try:
    from numeter.storage import myStorage
except ImportError:
    IMPORT_STORAGE = False
else:
    IMPORT_STORAGE = True

def print_config(check_type):
    print 'graph_title Numeter storage stats'
    print 'graph_info This graph shows storage stats'
    print 'graph_vlabel value'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    for name in check_type:
        print '%s.label %s' % (name, name)
        print '%s.draw LINE' % name
        print '%s.info %s value' % (name, name)
        if name == "collectors":
            print '%s.color #909122' % name
        elif name == "hosts":
            print '%s.color #67809e' % name
        elif name == "plugins":
            print '%s.color #53b73a' % name
        elif name == "datas":
            print '%s.color #0327ca' % name
        elif name == "seconds":
            print '%s.color #7347ba' % name

def load_params():
# Sample log output:
# ---- End : numeter_storage, 1 collector, 1 Hosts, 31 Plugins, 150 Datas in 0.0824151039124, seconds.
    global  STORAGE_LOG, STORAGE_PATTERN
    global  GREP_PATTERN
    STORAGE_LOG      = os.getenv('storageLog',
                                 '/var/log/numeter/numeter-storage.log')
    STORAGE_PATTERN  = os.getenv('storagePattern',
                                 '.*---- End : numeter_storage, '
                                 + '([0-9\.]+) collector, '
                                 + '([0-9\.]+) Hosts, '
                                 + '([0-9\.]+) Plugins, '
                                 + '([0-9\.]+) Datas in '
                                 + '([0-9\.]+), seconds')
    GREP_PATTERN     = os.getenv('grepPattern',
                                 ' End : numeter_') # For performance

def get_file_line():
    "Return the last matching line in log file"
    stdout = subprocess.Popen('grep "' + GREP_PATTERN + '" ' + STORAGE_LOG
                              + ' 2>/dev/null | tail -1',
                              shell=True,
                              stdout=subprocess.PIPE)
    return stdout.communicate()[0]

def get_value_in_line(name, line):
    # 0 data / 1 error
    result = re.match(STORAGE_PATTERN, line)
    if result is not None:
        idx = CHECK_TYPE.index(name) + 1
        if result.group(idx) is not None:
            return str(result.group(idx))
    else:
        return None

def print_value_storage(name, value):
    if value is None:
        value = 'U'
    print '%s.value %s' % (name, value)


if __name__ == '__main__':
    ARGV = sys.argv[:]
    # Disable seconds
    #CHECK_TYPE = ['collectors','hosts','plugins','datas','seconds']
    CHECK_TYPE = ['collectors', 'hosts', 'plugins', 'datas']
    if len(ARGV) > 1:
        if ARGV[1] == 'config':
            print_config(CHECK_TYPE)
        elif ARGV[1] == 'autoconf':
            if not IMPORT_STORAGE:
                print 'no (failed import storage module)'
                sys.exit(0)
            print 'yes'
    elif IMPORT_STORAGE:
        load_params()
        FILELINE = get_file_line()
        for NAME in CHECK_TYPE:
            VALUE = get_value_in_line(NAME, FILELINE)
            print_value_storage(NAME, VALUE)
