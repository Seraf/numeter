#!/usr/bin/env python
#
# Plugin to monitor numeter storage
#
# E.g.
#    ln -s /usr/share/munin/plugins/numeter_storage_stats /etc/munin/plugins/numeter_storage_stats
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto
#
#  [numeter_*]
#  env.pollerLog
#  env.collectorLog
#  env.storageLog
#  env.pollerPattern
#  env.collectorPattern
#  env.storagePattern
#  env.grepPattern

import sys
import os
import subprocess
import re

try: 
    from numeter_storage import myStorage
except ImportError:
    import_storage = False
else:
    import_storage = True

def print_config(check_type):
    print 'graph_title Numeter storage stats'
    print 'graph_info This graph shows storage stats'
    print 'graph_vlabel value'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category numeter'
    for name in check_type:
        print '%s.label %s' % (name, name)
        print '%s.draw LINE' % name
        print '%s.info %s value' % (name, name)
        if name == "collectors":
            print '%s.color #909122' % name
        elif name == "hosts":
            print '%s.color #67809e' % name
        elif name == "plugins":
            print '%s.color #53b73a' % name
        elif name == "datas":
            print '%s.color #0327ca' % name
        elif name == "seconds":
            print '%s.color #7347ba' % name

def load_params():
# Sample log output:
# ---- End : numeter_storage, 1 collector, 1 Hosts, 31 Plugins, 150 Datas in 0.0824151039124, seconds.
    global  STORAGE_LOG, STORAGE_PATTERN
    global  GREP_PATTERN
    STORAGE_LOG      = os.getenv('storageLog',
                                 '/var/log/numeter/numeter-storage.log')
    STORAGE_PATTERN  = os.getenv('storagePattern',
                                 '.*---- End : numeter_storage, ([0-9\.]+) '
                                 + 'collector, ([0-9\.]+)'
                                 + ' Hosts, ([0-9\.]+) '
                                 + 'Plugins, ([0-9\.]+) '
                                 + 'Datas in ([0-9\.]+), seconds')
    GREP_PATTERN     = os.getenv('grepPattern',
                                 ' End : numeter_') # For performance 

def get_time_in_log(name, logfile, pattern):
    stdout = subprocess.Popen('grep "' + GREP_PATTERN + '" ' + logfile
                              + ' | tail -1',
                              shell=True,
                              stdout=subprocess.PIPE)
    out = stdout.communicate()[0]
    # 0 data / 1 error
    regex = pattern
    if re.match(regex, out):
        result = re.match(regex, out)
        idx = check_type.index(name)+1
        if result.group(idx) != None:
            return str(result.group(idx))
            #return 'yes'
    else:
        return 'U'

def print_values_storage(name):
    if not os.path.isfile(STORAGE_LOG):
        print name+".value U"
        return
    print name+'.value ' + get_time_in_log(name, STORAGE_LOG, STORAGE_PATTERN)


if __name__ == '__main__':
    argv = sys.argv[:]
    check_type = ['collectors','hosts','plugins','datas','seconds']
    if len(argv) > 1:
        if argv[1] == 'config':
            print_config(check_type)
        elif argv[1] == 'suggest' and ( import_storage ):
            print_suggest()
        elif argv[1] == 'autoconf':
            if not import_storage:  
                print 'no (failed import poller or collector or storage module)'
                sys.exit(0)
            print 'yes'

    elif import_storage:
        load_params()
        for name in check_type: 
            print_values_storage(name)
