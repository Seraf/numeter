#!/usr/bin/env python
#
# Nagios plugin to monitor numeter
#

import sys
import time
import datetime
import json
import argparse

try:
    from numeter.redis import RedisConnect
except ImportError:
    print "STATE UNKNOWN: unable to load redis module"
    sys.exit(3)

# Get args
PARSER = argparse.ArgumentParser()
PARSER.add_argument("-P", "--plugins",
            help="Max deleted plugins. Default 1", type=int)
PARSER.add_argument("-H", "--hosts",
            help="Max deleted hosts. Default 1", type=int)
PARSER.add_argument("-c", "--clean",
            help="Max days since last WSP clean. Default 2", type=int)
PARSER.add_argument("-o", "--oldwsp",
            help="Max old WSPs. Default 1", type=int)
PARSER.add_argument("-d", "--database",
            help="Database to use. Default 2", type=int)
PARSER.add_argument("-p", "--port",
            help="Port number to use. Default 6379", type=int)
ARGS = PARSER.parse_args()

REDIS_HOST      = '127.0.0.1'
REDIS_PORT      =  ARGS.port or 6379
REDIS_TIMEOUT   =  10
REDIS_DB        =  ARGS.database or 2
REDIS_PASSWORD  =  None

# Set critical values
MAX_DELETED_PLUGINS = ARGS.plugins or 1
MAX_DELETED_HOSTS = ARGS.hosts or 1
MAX_WSP_CLEAN = ARGS.clean or 2
MAX_OLD_WSPS = ARGS.oldwsp or 1


def get_deleted_plugins():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        connection_error()

    try:
        deleted_plugins = redis_connexion.redis_hlen('DELETED_PLUGIN')
    except:
        query_error()

    if deleted_plugins > MAX_DELETED_PLUGINS:
        print "CRITICAL: %d deleted plugins (%d allowed)" % (deleted_plugins, MAX_DELETED_PLUGINS)
        sys.exit(2)


def get_last_wsp_clean():
    redis_connexion = RedisConnect(host=REDIS_HOST,
       	          port=REDIS_PORT,
                  socket_timeout=REDIS_TIMEOUT,
                  db=REDIS_DB,
                  password=REDIS_PASSWORD)

    if redis_connexion._error:
        connection_error()

        try:
            lastfetch = redis_connexion.redis_get('LAST_WSP_CLEAN')
        except:
            query_error()

        timenow = datetime.datetime.now()
        timenow = time.mktime(timenow.timetuple())
        # Time delta in seconds / 3600 = hours
        lastclean = (timenow - int(lastfetch)) / 3600

        if lastclean > MAX_WSP_CLEAN * 24:
            print "CRITICAL: wsp clean %d hours ago" % (lastclean)
            sys.exit(2)


def get_deleted_hosts():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        connection_error()
    try:
        deleted_hosts = redis_connexion.redis_hlen('DELETED_HOSTS')
    except:
        query_error()

    if deleted_hosts > MAX_DELETED_HOSTS:
        print "CRITICAL: %d deleted hosts (%d allowed)" % (deleted_hosts, MAX_DELETED_HOSTS)
        sys.exit(2)

def get_old_wsps():
    redis_connexion = RedisConnect(host=REDIS_HOST,
                      port=REDIS_PORT,
                      socket_timeout=REDIS_TIMEOUT,
                      db=REDIS_DB,
                      password=REDIS_PASSWORD)

    if redis_connexion._error:
        connection_error()

    try:
        old_wsps =  len(json.loads(redis_connexion.redis_get('OLD_WSP')))
    except:
        query_error()

    if old_wsps > MAX_OLD_WSPS:
        print "CRITICAL: %d old_wsps (%d allowed)" % (old_wsps, MAX_OLD_WSPS)
        sys.exit(2)

def connection_error():
    print "STATE UNKNOWN: Unable to connect to redis server"
    sys.exit(3)

def query_error():
    print "STATE UNKNOWN: Unable to fetch value"
    sys.exit(3)


# main program
get_deleted_plugins()
get_deleted_hosts()
get_last_wsp_clean()
get_old_wsps()

print "OK"

