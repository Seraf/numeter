#!/usr/bin/env python
#
# Nagios plugin to monitor numeter
#

import sys
import time
import datetime
import argparse

try: 
    from myRedisConnect import *
except ImportError:
    print "STATE UNKNOWN: unable to load redis module"
    sys.exit(3)

# Get args
PARSER = argparse.ArgumentParser()
PARSER.add_argument("-w", "--warning", 
            help="Warning delay since last collector polling. Default 600s", type=int)
PARSER.add_argument("-c", "--critical", 
            help="Critical delay since last collector polling. Default 1200s", type=int)
PARSER.add_argument("-d", "--database",
            help="Database to use. Default 0", type=int)
PARSER.add_argument("-p", "--port",
            help="Port number to use. Default 5959", type=int)
ARGS = PARSER.parse_args()

REDIS_HOST      = '127.0.0.1'
REDIS_PORT      =  ARGS.port or 5959 
REDIS_TIMEOUT   =  10
REDIS_DB        =  ARGS.database or 0
REDIS_PASSWORD  =  None

# Set values
WARN_DELAY = ARGS.warning or 600
CRIT_DELAY = ARGS.critical or 1200

def get_delay():
    redis_connexion = myRedisConnect(host=REDIS_HOST,
                  port=REDIS_PORT,
                  socket_timeout=REDIS_TIMEOUT,
                  db=REDIS_DB,
                  password=REDIS_PASSWORD)

    if redis_connexion._error:
        connection_error()

    server_list = redis_connexion.redis_hkeys('SERVER')

    for server in server_list:
        last_visit = redis_connexion.redis_hget('SERVER', server)

        timenow = datetime.datetime.now()
        timenow = time.mktime(timenow.timetuple())
        delay = (timenow - int(last_visit))

        if delay > CRIT_DELAY:
            print "CRITICAL: server %s collected data %ds ago " % (server, delay)
            sys.exit(2)
        elif delay > WARN_DELAY:
            print "WARNING: server %s collected data %ds ago " % (server, delay)
            sys.exit(1)


def connection_error():
    print "STATE UNKNOWN: Unable to connect to redis server"
    sys.exit(3)


# main program
get_delay()

print "OK"

