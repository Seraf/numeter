#!/usr/bin/env python
#
# Nagios plugin to monitor numeter
#

import sys
import time
from datetime import datetime
import argparse
import subprocess
import re

# Get args
PARSER = argparse.ArgumentParser()
PARSER.add_argument("-w", "--warning",
            help="Warning delay since last polling. Default 600s", type=int)
PARSER.add_argument("-c", "--critical",
            help="Critical delay since last polling. Default 1200s", type=int)
PARSER.add_argument("-f", "--file",
            help="Poller log file", type=str)
ARGS = PARSER.parse_args()

POLLER_LOG = ARGS.file or '/var/log/numeter/numeter-poller.log'

# Set values
WARN_DELAY = ARGS.warning or 600
CRIT_DELAY = ARGS.critical or 1200

def get_last_polling():
    "Return the last matching line in log file"
    grep_pattern = ' End : numeter_'
    stdout = subprocess.Popen('grep "%s" %s 2>/dev/null | tail -1' % (grep_pattern , POLLER_LOG),
                              shell=True,
                              stdout=subprocess.PIPE)
    output = stdout.communicate()[0]

    poller_pattern  = ( '([0-9]+-[0-9]+-[0-9]+ [0-9]+:[0-9]+:[0-9]+),.*---- End.*')

    regex = re.match(poller_pattern, output)
    if regex is not None:
        return regex.group(1)
    else:
        return None

def get_delay():

    last_polling = get_last_polling()

    # get delta
    last = datetime.strptime(last_polling, "%Y-%m-%d %H:%M:%S")
    now = datetime.now()

    delay = (now - last).total_seconds()

    if delay > CRIT_DELAY:
        print "CRITICAL: last polling data %ds ago " % delay
        sys.exit(2)
    elif delay > WARN_DELAY:
        print "WARNING: last polling %ds ago " % delay
        sys.exit(1)


# main program
get_delay()

print "OK"

