#!/usr/bin/env python

# Need apt-get install python-daemon

import sys
import time
from daemon import runner
from lockfile import LockTimeout
import logging

from numeter.storage import Storage
import ConfigParser

class App():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/var/run/numeter_storage.pid'
        self.pidfile_timeout = 0.1
        self._storage_time = 60
        # Read storage conf time
        self.storage_configFile = "/etc/numeter/numeter_storage.cfg"
        myConf=self._readConf()
        if myConf.has_option('global', 'enable'):
            if not myConf.getboolean('global', 'enable'):
                print("Storage disabled in config file. Not starting...")
                exit(100)
        # Get storage time
        if myConf.has_option('global', 'storage_time') \
        and myConf.getint('global', 'storage_time'):
            self._storage_time = myConf.getint('global', 'storage_time')

    def _readConf(self):
        "Read configuration file"
        configParse = ConfigParser.RawConfigParser()

        if configParse.read(self.storage_configFile) == []:
            print ("CRIT - Read Config file "
                   + self.storage_configFile
                   + " - ERROR (empty or doesn't exist)")
            exit(1)
        return configParse

    def run(self):
        storage = Storage(self.storage_configFile)
        storage.startStorage()

app = App()
daemon_runner = runner.DaemonRunner(app)

try:
    daemon_runner.do_action()
except (runner.DaemonRunnerStopFailureError, TypeError) as e:
    print 'PID not found, Already stop. %s' % e
except LockTimeout:
    print 'Lock file found, Already start. %s.lock' % app.pidfile_path
except Exception as e:
    print "Error : %s %s" % (e, str(sys.exc_info()))

