#!/usr/bin/env python

# Need apt-get install python-daemon

import sys
import time
import logging
import ConfigParser
from daemon import runner
from os.path import isfile
from lockfile import LockTimeout

# Need before oslo messaging (oslo/messaging/_cmd/zmq_receiver.py line 19)
import eventlet
eventlet.monkey_patch()

from numeter.storage import Storage

class App():
    def __init__(self):
        # Fix daemon launch if you have no tty (like puppet)
        # Quick fix will be remove soon
        if isfile('/dev/tty'):
            self.stdout_path = '/dev/tty'
            self.stderr_path = '/dev/tty'
        else:
            self.stdout_path = '/dev/null'
            self.stderr_path = '/dev/null'
        self.stdin_path = '/dev/null'
        self.pidfile_path =  '/var/run/numeter_storage.pid'
        self.pidfile_timeout = 0.1
        self.storage_configFile = "/etc/numeter/numeter_storage.cfg"
        myConf=self._readConf()
        if myConf.has_option('global', 'enable'):
            if not myConf.getboolean('global', 'enable'):
                print("Storage disabled in config file. Not starting...")
                exit(100)

    def _readConf(self):
        "Read configuration file"
        configParse = ConfigParser.RawConfigParser()

        if configParse.read(self.storage_configFile) == []:
            print ("CRIT - Read Config file "
                   + self.storage_configFile
                   + " - ERROR (empty or doesn't exist)")
            exit(1)
        return configParse

    def run(self):
        storage = Storage(self.storage_configFile)
        storage.startStorage()

app = App()
daemon_runner = runner.DaemonRunner(app)

try:
    daemon_runner.do_action()
except (runner.DaemonRunnerStopFailureError, TypeError) as e:
    print 'PID not found, Already stop. %s' % e
except LockTimeout:
    print 'Lock file found, Already start. %s.lock' % app.pidfile_path
except Exception as e:
    print "Error : %s %s" % (e, str(sys.exc_info()))

